import { AccAddress, MsgExecuteContract, Coins, MsgInstantiateContract } from '@terra-money/terra.js';
import { EmptyObject } from '../utils/EmptyObject';
import { AssetInfo } from '../utils/Asset';
import { ContractClient } from './ContractClient';
export declare namespace TerraswapFactory {
    interface InitHook {
        msg: string;
        contract_addr: AccAddress;
    }
    interface InitMsg {
        pair_code_id: number;
        token_code_id: number;
        init_hook?: InitHook;
    }
    interface HandleUpdateConfig {
        update_config: {
            owner?: AccAddress;
            token_code_id?: number;
            pair_code_id?: number;
        };
    }
    interface HandleCreatePair {
        create_pair: {
            asset_infos: [AssetInfo, AssetInfo];
            init_hook?: InitHook;
        };
    }
    interface QueryConfig {
        config: EmptyObject;
    }
    interface QueryPair {
        pair: {
            asset_infos: [AssetInfo, AssetInfo];
        };
    }
    interface QueryPairs {
        pairs: {
            start_after?: [AssetInfo, AssetInfo];
            limit?: number;
        };
    }
    interface ConfigResponse {
        owner: AccAddress;
        pair_code_id: number;
        token_code_id: number;
    }
    interface PairResponse {
        asset_infos: [AssetInfo, AssetInfo];
        contract_addr: AccAddress;
        liquidity_token: AccAddress;
    }
    interface PairsResponse {
        pairs: Array<PairResponse>;
    }
    type HandleMsg = HandleUpdateConfig | HandleCreatePair;
    type QueryMsg = QueryConfig | QueryPair | QueryPairs;
}
export declare class TerraswapFactory extends ContractClient {
    init(init_msg: TerraswapFactory.InitMsg, migratable: boolean): MsgInstantiateContract;
    updateConfig(config: TerraswapFactory.HandleUpdateConfig['update_config']): MsgExecuteContract;
    createPair(asset_infos: [AssetInfo, AssetInfo], init_hook?: TerraswapFactory.InitHook): MsgExecuteContract;
    getConfig(): Promise<TerraswapFactory.ConfigResponse>;
    getPair(asset_infos: [AssetInfo, AssetInfo]): Promise<TerraswapFactory.PairResponse>;
    getPairs(start_after?: [AssetInfo, AssetInfo], limit?: number): Promise<TerraswapFactory.PairsResponse>;
    protected query<T>(query_msg: TerraswapFactory.QueryMsg): Promise<T>;
    protected createExecuteMsg(execute_msg: TerraswapFactory.HandleMsg, coins?: Coins.Input): MsgExecuteContract;
}
