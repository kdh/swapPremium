import { AccAddress, Coins, MsgExecuteContract, MsgInstantiateContract, Numeric } from '@terra-money/terra.js';
import { EmptyObject } from '../utils/EmptyObject';
import { ContractClient } from './ContractClient';
export declare namespace MirrorCommunity {
    interface InitMsg {
        owner: AccAddress;
        mirror_token: AccAddress;
        spend_limit: string;
    }
    interface HandleUpdateConfig {
        update_config: {
            owner?: AccAddress;
            spend_limit?: string;
        };
    }
    interface HandleSpend {
        spend: {
            recipient: AccAddress;
            amount: string;
        };
    }
    interface QueryConfig {
        config: EmptyObject;
    }
    interface ConfigResponse {
        owner: AccAddress;
        mirror_token: AccAddress;
        spend_limit: string;
    }
    type HandleMsg = HandleUpdateConfig | HandleSpend;
    type QueryMsg = QueryConfig;
}
export declare class MirrorCommunity extends ContractClient {
    init(init_msg: MirrorCommunity.InitMsg, migratable: boolean): MsgInstantiateContract;
    updateConfig(config: MirrorCommunity.HandleUpdateConfig['update_config']): MsgExecuteContract;
    spend(recipient: AccAddress, amount: Numeric.Input): MsgExecuteContract;
    getConfig(): Promise<MirrorCommunity.ConfigResponse>;
    protected query<T>(query_msg: MirrorCommunity.QueryMsg): Promise<T>;
    protected createExecuteMsg(executeMsg: MirrorCommunity.HandleMsg, coins?: Coins.Input): MsgExecuteContract;
}
