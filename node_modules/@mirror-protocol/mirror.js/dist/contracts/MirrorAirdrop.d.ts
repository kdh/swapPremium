import { AccAddress, Coins, MsgExecuteContract, MsgInstantiateContract, Numeric } from '@terra-money/terra.js';
import { EmptyObject } from '../utils/EmptyObject';
import { ContractClient } from './ContractClient';
export declare namespace MirrorAirdrop {
    interface InitMsg {
        owner: AccAddress;
        mirror_token: AccAddress;
    }
    interface HandleUpdateConfig {
        update_config: {
            owner?: AccAddress;
        };
    }
    interface HandleUpdateMerkleRoot {
        update_merkle_root: {
            stage: number;
            merkle_root: string;
        };
    }
    interface HandleRegisterMerkleRoot {
        register_merkle_root: {
            merkle_root: string;
        };
    }
    interface HandleClaim {
        claim: {
            stage: number;
            amount: string;
            proof: Array<string>;
        };
    }
    interface QueryConfig {
        config: EmptyObject;
    }
    interface QueryMerkleRoot {
        merkle_root: {
            stage: number;
        };
    }
    interface QueryLatestStage {
        latest_stage: EmptyObject;
    }
    interface QueryIsClaimed {
        is_claimed: {
            stage: number;
            address: string;
        };
    }
    interface ConfigResponse {
        owner: AccAddress;
        mirror_token: AccAddress;
    }
    interface MerkleRootResponse {
        stage: number;
        merkle_root: string;
    }
    interface LatestStageResponse {
        latest_stage: number;
    }
    interface IsClaimedResponse {
        is_claimed: boolean;
    }
    type HandleMsg = HandleUpdateConfig | HandleUpdateMerkleRoot | HandleRegisterMerkleRoot | HandleClaim;
    type QueryMsg = QueryConfig | QueryMerkleRoot | QueryLatestStage | QueryIsClaimed;
}
export declare class MirrorAirdrop extends ContractClient {
    init(init_msg: MirrorAirdrop.InitMsg, migratable: boolean): MsgInstantiateContract;
    updateConfig(config: MirrorAirdrop.HandleUpdateConfig['update_config']): MsgExecuteContract;
    updateMerkleRoot(stage: number, merkleRoot: string): MsgExecuteContract;
    registerMerkleRoot(merkleRoot: string): MsgExecuteContract;
    claim(stage: number, amount: Numeric.Input, proof: Array<string>): MsgExecuteContract;
    getConfig(): Promise<MirrorAirdrop.ConfigResponse>;
    getMerkleRoot(stage: number): Promise<MirrorAirdrop.MerkleRootResponse>;
    getLatestStage(): Promise<MirrorAirdrop.LatestStageResponse>;
    getIsClaimed(stage: number, address: AccAddress): Promise<MirrorAirdrop.IsClaimedResponse>;
    protected query<T>(query_msg: MirrorAirdrop.QueryMsg): Promise<T>;
    protected createExecuteMsg(executeMsg: MirrorAirdrop.HandleMsg, coins?: Coins.Input): MsgExecuteContract;
}
