import { AccAddress, Coins, Numeric, MsgInstantiateContract, MsgExecuteContract } from '@terra-money/terra.js';
import { ContractClient } from './ContractClient';
import { EmptyObject } from '../utils/EmptyObject';
export declare namespace MirrorOracle {
    interface InitMsg {
        owner: AccAddress;
        base_asset: string;
    }
    interface HandleUpdateConfig {
        update_config: {
            owner?: AccAddress;
        };
    }
    interface HandleRegisterAsset {
        register_asset: {
            asset_token: AccAddress;
            feeder: AccAddress;
        };
    }
    interface HandleFeedPrice {
        feed_price: {
            prices: Array<[AccAddress, string]>;
        };
    }
    interface QueryConfig {
        config: EmptyObject;
    }
    interface QueryFeeder {
        feeder: {
            asset_token: AccAddress;
        };
    }
    interface QueryPrice {
        price: {
            base_asset: string;
            quote_asset: string;
        };
    }
    interface QueryPrices {
        prices: {
            start_after?: AccAddress;
            limit?: number;
        };
    }
    interface ConfigResponse {
        owner: AccAddress;
        base_asset: string;
    }
    interface FeederResponse {
        asset_token: AccAddress;
        feeder: AccAddress;
    }
    interface PriceResponse {
        rate: string;
        last_updated_base: number;
        last_updated_quote: number;
    }
    interface PricesResponseElem {
        price: string;
        asset_token: AccAddress;
        last_updated_time: number;
    }
    interface PricesResponse {
        prices: Array<PricesResponseElem>;
    }
    type HandleMsg = HandleUpdateConfig | HandleRegisterAsset | HandleFeedPrice;
    type QueryMsg = QueryConfig | QueryFeeder | QueryPrice | QueryPrices;
}
export declare class MirrorOracle extends ContractClient {
    init(init_msg: MirrorOracle.InitMsg, migratable: boolean): MsgInstantiateContract;
    updateConfig(config: MirrorOracle.HandleUpdateConfig['update_config']): MsgExecuteContract;
    registerAsset(asset_token: AccAddress, feeder: AccAddress): MsgExecuteContract;
    feedPrice(prices: Array<{
        asset_token: AccAddress;
        price: Numeric.Input;
    }>): MsgExecuteContract;
    getConfig(): Promise<MirrorOracle.ConfigResponse>;
    getFeeder(asset_token: AccAddress): Promise<MirrorOracle.FeederResponse>;
    getPrice(base_asset: string, quote_asset: string): Promise<MirrorOracle.PriceResponse>;
    getPrices(start_after?: AccAddress, limit?: number): Promise<MirrorOracle.PricesResponse>;
    protected query<T>(query_msg: MirrorOracle.QueryMsg): Promise<T>;
    protected createExecuteMsg(execute_msg: MirrorOracle.HandleMsg, coins?: Coins.Input): MsgExecuteContract;
}
